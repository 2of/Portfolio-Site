// --- Layout Containers ---
.ContentContainer {
  position: relative; 
  height: var(--content-height, 100vh); 
  width: 100%;
}

.mobilecontainer { 
  height: 100%;
  width: 100%;
  position: absolute;
  bottom: 0;
  display: flex;
  flex-direction: column; // Allow vertical stacking and centering

  // Use padding to push content away from the edges
  padding: 24px; // 24px = 1.5rem

  // We want the content to sit in the middle of the bottom 3/4ths of the page.
  // We can achieve this by using the vertical alignment properties:
  // - Push content away from the top: (100% - 75%) / 2 = 12.5% of the height
  // - The remaining 87.5% is where we want to center the content.
  // We'll use padding for simplicity, assuming the content itself is not tall.
  padding-top: 15vh; // Adjusted to push content down significantly, centering it visually lower
  
  justify-content: flex-end; // Align content blocks to the bottom of the container
}

.sidebyside { 
  max-width: 1000px;
  padding: 122px;
  width: 100%;
  gap: 24px;
  display: flex;
}

.sidebyside .content { 
  width: 80%;
}

.sidebyside .explainer { 
  width: 20%;
}

// --- Animation Classes (Adjusted for Clarity) ---
.textBlock {
  top: 0;
  left: 0;
  width: 100%;
  opacity: 1;
  transform: translateY(0) scale(1) rotate(0deg);
  transition: 
    transform 0.5s cubic-bezier(0.25, 1, 0.5, 1),
    opacity 0.5s ease-in-out;
}

// Initial state for content that should fade in (e.g., when the element is created)
.startTransparent {
  opacity: 0;
  transform: translateY(30px) scale(0.95) rotate(-2deg);
}

// State to transition to (ready/visible state)
.ready {
  opacity: 1;
  transform: translateY(0) scale(1) rotate(0deg);
}

// State to transition away from (or an alternative hidden state)
.fadeOut {
  opacity: 0;
  transform: scale(0.95);
}

// NOTE: The original .fadeIn class was set to opacity: 0 and transform: none, 
// which is a strange name for a transition end state. I've removed it, 
// relying on `.ready` for the visible state.


// --- Typography ---
.sidebyside .textBlock h1 {
  font-size: 19.2px; // 1.2rem = 19.2px
  padding-bottom: 12px; // 0.75rem = 12px. Swapped from margin-bottom.
  font-weight: 900;
  color: var(--text-primary);
}

.sidebyside .textBlock p {
  font-size: 16px; // 1rem = 16px
  color: var(--text-secondary);
  padding-bottom: 8px; // 0.5rem = 8px. Swapped from margin-bottom.
  max-width: 420px;
}